<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
    http://code.alibabatech.com/schema/dubbo
    http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
    <!-- 本配置文件是工名为mvc-dispatcher的DispatcherServlet使用， 提供其相关的Spring MVC配置 -->

    <!-- 事务的注解 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- aop切面代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true" />

    <!-- 加载jdbc.properties文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:config/jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。 激活 @Required
         @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
    <context:annotation-config />

    <!-- DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service -->
  <!--  <context:component-scan base-package="com.raycloud">
       &lt;!&ndash; <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />&ndash;&gt;
    </context:component-scan>-->

    <!-- HandlerMapping, 无需配置， Spring MVC可以默认启动。 DefaultAnnotationHandlerMapping
         annotation-driven HandlerMapping -->

    <context:component-scan base-package="com.raycloud"></context:component-scan>

    <!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 -->
    <mvc:annotation-driven />

    <!-- 静态资源处理， css， js， imgs -->
    <mvc:resources mapping="/resources/**" location="/resources" />

    <!-- 这里是配置json -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 基础视图 -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/" />
        <property name="suffix" value=".jsp" />
    </bean>


    <!-- 这是文件上传 -->
    <!--200*1024*1024即200M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="209715200" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="resolveLazily" value="true" />
    </bean>


<!-- dubbo提供服务 -->
<!--
    &lt;!&ndash; 提供方应用名称信息，这个相当于起一个名字，我们dubbo管理页面比较清晰是哪个应用暴露出来的 &ndash;&gt;
    <dubbo:application name="dubbo_provider"></dubbo:application>
    &lt;!&ndash; 使用zookeeper注册中心暴露服务地址 &ndash;&gt;
    <dubbo:registry address="zookeeper://127.0.0.1:2181" check="false" subscribe="false" register=""></dubbo:registry>
    &lt;!&ndash; 要暴露的服务接口 &ndash;&gt;
    <dubbo:service interface="com.raycloud.service.TestService" ref="testService" />
-->


<!-- ==================================== druid-->
  <!--  &lt;!&ndash; 配置路由规则开始 &ndash;&gt;
    <bean id="hashFunction" class="com.raycloud.dao.router.HashFunction"></bean>
    <bean id="internalRouter"
          class="com.alibaba.cobar.client.router.config.CobarInteralRouterXmlFactoryBean">
        &lt;!&ndash; functionsMap是在使用自定义路由规则函数的时候使用 &ndash;&gt;
        <property name="functionsMap">
            <map>
                <entry key="hash" value-ref="hashFunction"></entry>
            </map>
        </property>
        <property name="configLocations">
            <list>
                <value>classpath*:dbrule/sharding-rules-on-namespace.xml</value>
            </list>
        </property>
    </bean>

    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>

    &lt;!&ndash; 准备分库啦~~ &ndash;&gt;
    &lt;!&ndash; 数据库0 &ndash;&gt;
    <bean id="dataSource0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;
        <property name="driverClassName" value="${driverClassName}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
        <property name="initialSize" value="1" />
        &lt;!&ndash; 最小闲置数 &ndash;&gt;
        <property name="minIdle" value="1" />
        &lt;!&ndash; 最大连接数 &ndash;&gt;
        <property name="maxActive" value="20" />
        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
        <property name="maxWait" value="60000" />
        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        &lt;!&ndash; 配置监控统计拦截的filters，去掉后监控界面sql无法统计 &ndash;&gt;
        <property name="filters" value="stat,config,log4j" />
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
            </list>
        </property>
        &lt;!&ndash; 读取配置文件 &ndash;&gt;
        &lt;!&ndash; <property name="connectProperties" value="config.file=file:///D:haha.properties"/>&ndash;&gt;
    </bean>

    &lt;!&ndash; 数据库1 &ndash;&gt;
    <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;
        <property name="driverClassName" value="${driverClassName}" />
        <property name="url" value="${url_1}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
        <property name="initialSize" value="1" />
        &lt;!&ndash; 最小闲置数 &ndash;&gt;
        <property name="minIdle" value="1" />
        &lt;!&ndash; 最大连接数 &ndash;&gt;
        <property name="maxActive" value="20" />
        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
        <property name="maxWait" value="60000" />
        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
        <property name="poolPreparedStatements" value="false" /> &lt;!&ndash; mysql 不支持true &ndash;&gt;
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        &lt;!&ndash; 配置监控统计拦截的filters，去掉后监控界面sql无法统计 &ndash;&gt;
        <property name="filters" value="stat,config,log4j" />
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
            </list>

        </property>
        &lt;!&ndash;<property name="connectProperties" value="config.file=file:///D:haha.properties"/>&ndash;&gt;
    </bean>

    &lt;!&ndash; 将分散的数据源集中起来 &ndash;&gt;
    <bean id="dataSources" class="com.alibaba.cobar.client.datasources.DefaultCobarDataSourceService">
        <property name="dataSourceDescriptors">
            <set>
                <bean class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
                    <property name="identity" value="part_0"/> &lt;!&ndash; 和sharding-rules-on-namespace.xml关联 &ndash;&gt;
                    <property name="targetDataSource" ref="dataSource0"/>
                    <property name="targetDetectorDataSource" ref="dataSource0"/>
                </bean>
                &lt;!&ndash;<bean class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
                    <property name="identity" value="part_1"/>
                    <property name="targetDataSource" ref="dataSource1"/>
                    <property name="targetDetectorDataSource" ref="dataSource1"/>
                </bean>&ndash;&gt;
            </set>
        </property>
        <property name="haDataSourceCreator">
            <bean class="com.alibaba.cobar.client.datasources.ha.FailoverHotSwapDataSourceCreator">
                <property name="detectingSql" value="update cobarha set timeflag=CURRENT_TIMESTAMP()"/>
            </bean>
        </property>
    </bean>
    &lt;!&ndash; 配成cobar的sqlMapClientTemplate &ndash;&gt;
    <bean id="sqlMapClientTemplate" class="com.alibaba.cobar.client.CobarSqlMapClientTemplate">
        <property name="sqlMapClient" ref="sqlMapClient"/>
        <property name="cobarDataSourceService" ref="dataSources"/>
        <property name="sqlAuditor">
            <bean class="com.alibaba.cobar.client.audit.SimpleSqlAuditor"/>
        </property>
        <property name="router" ref="internalRouter"/>
        <property name="profileLongTimeRunningSql" value="false"/>
        <property name="longTimeRunningSqlIntervalThreshold" value="3600000"/>
    </bean>

    &lt;!&ndash; 事务配置 &ndash;&gt;
    <bean id="transactionManager" class="com.alibaba.cobar.client.transaction.MultipleDataSourcesTransactionManager">
        <property name="cobarDataSourceService" ref="dataSources"/>
        <property name="rollbackOnCommitFailure" value="true"/>
    </bean>
-->

<!-- ==================================== 正常的jdbc -->
    <!--正常的jdbc:   配置一个数据源,根据上面propertyConfig指定的location去找数据库连接的配置信息-->
    <bean id="dataSource"
          class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName">
            <value>${driverClassName}</value>
        </property>
        <property name="url">
            <value>${url}</value>
        </property>
        <property name="username">
            <value>${username}</value>
        </property>
        <property name="password">
            <value>${password}</value>
        </property>
    </bean>

    <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation">
            <value>classpath:sqlmap-config.xml</value>
        </property>
        <property name="mappingLocations" value="classpath:sqlmap/*-sqlmap.xml"/>
    </bean>

    <!--正常的jdbc-sqlMapClientTemplate用于访问db操作,与spring关联-->
    <bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
        <property name="sqlMapClient">
            <ref bean="sqlMapClient" />
        </property>
    </bean>

    <!--正常的jdbc事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>




 <!--   <aop:config>
        <aop:pointcut id="serviceOperation" expression="execution(* com.raycloud.service.impl.*.*(..))" />
        <aop:advisor pointcut-ref="serviceOperation" advice-ref="txAdvice" />
    </aop:config>
    &lt;!&ndash; 配置事务通知 &ndash;&gt;
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" rollback-for="Exception" propagation="REQUIRES_NEW" />
        </tx:attributes>
    </tx:advice>-->




</beans>
